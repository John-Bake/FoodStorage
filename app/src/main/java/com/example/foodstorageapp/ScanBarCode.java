package com.example.foodstorageapp;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Point;
import android.graphics.Rect;
import android.media.Image;
import android.net.Uri;
import android.os.Build;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
//import androidx.camera.core.ImageAnalysis;
//import androidx.camera.core.ImageProxy;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.mlkit.vision.barcode.Barcode;
import com.google.mlkit.vision.barcode.BarcodeScanner;
import com.google.mlkit.vision.barcode.BarcodeScannerOptions;
import com.google.mlkit.vision.barcode.BarcodeScanning;
import com.google.mlkit.vision.common.InputImage;

import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * Class for using the API to get JSON data from a QR code in an image.
 * There are three public methods:
 * fromCamera():    Gets an image from the camera - Not functioning in this version
 * fromFile():      Gets an image from camera storage
 * fromBitmap():    Uses a bitmap generated by the QR code generator.  This is for testing
 *
 * One private method:
 * ImageScanner(InputImage image):  Takes an image and returns the JSON string saved in the QR code
 *
 * Most of the code borrowed from:
 * https://github.com/googlesamples/mlkit/blob/428a1d75b93ee84b1d783ea75059a45514af98a2/android/android-snippets/app/src/main/java/com/google/example/mlkit/BarcodeScanningActivity.java#L67-L86
 *
 * UPCOMING CHANGES:
 * From Camera method will be functional
 *
 * @version 2020-12-16  1.0
 * @since   2020-12-16
 */


//public class ScanBarCode extends AppCompatActivity implements ImageAnalysis.Analyzer{
public class ScanBarCode extends AppCompatActivity {

    /**
     * Gets an image from the camera and then calls the ImageScanner method to get the
     * string from the QR code
     *
     * This method is not functioning at this time.
     *
     * @return
     * Returns a string containing the serialized JSON data from the QR code
     */
    @RequiresApi(api = Build.VERSION_CODES.O)
    public String fromCamera() {
        return "nothing";
    } //End of fromCamera


    /**
     * Gets an image from a file and then calls the ImageScanner method to get the
     * string from the QR code
     *
     * @param fileName  uri for the file to be opened
     * @param context   Activity context.
     * @return
     * Returns a string containing the serialized JSON data from the QR code
     */
    @RequiresApi(api = Build.VERSION_CODES.O)
    public String fromFile(Uri fileName, Context context) {
        Log.i("fromFile", "start");
        final String[] convertedCode = new String[1];
        InputImage image;
        try {
            image = InputImage.fromFilePath(context, fileName);
            Log.i("fromFile", "in try " + fileName.toString());
        } catch (IOException e) {
            e.printStackTrace();
            image = null;
            Log.i("fromFile", "in catch" + e);
        }

        String newString = null;
        try {
            newString = imageScanner(image);
        } catch (InterruptedException e) {
            e.printStackTrace();
            newString = e.toString();
        }
        Log.i("fromFile end", newString);

        return newString;

    }   //end of fromFile()

    /**
     * Gets an image from a bitmap generated by the QR code generator and calls the ImageScanner
     * method to get the string from the QR code.  Used for testing.
     * @param bitmap   Bitmap image
     * @return
     * Returns a string containing the serialized JSON data from the QR code
     */
    @RequiresApi(api = Build.VERSION_CODES.O)
    public String fromBitmap(Bitmap bitmap) {
        Log.i("fromBitmap", "start");
        final String[] convertedCode = new String[1];
        InputImage image = InputImage.fromBitmap(bitmap, 0);

        String newString;
        try {
            newString = imageScanner(image);
        } catch (InterruptedException e) {
            e.printStackTrace();
            newString = e.toString();
        }

        Log.i("fromBitmap end", newString);

        return newString;
    }   //End of fromBitmap

    /**
     * Takes an image, uses the BarcodeScanner API to get data from the QR code inside the image
     *
     * @param image InputImage.  The source of the image doesn't matter
     * @return
     * Returns a string containing the serialized JSON data from the QR code
     * If something goes wrong and a barcode is not found in the image, a JSON string for a dummy
     * StorageItem is returned instead
     *
     * @throws InterruptedException
     */
    @RequiresApi(api = Build.VERSION_CODES.O)
    private String imageScanner(InputImage image) throws InterruptedException {
        final String[] convertedCode = new String[1];
        convertedCode[0] = null;
        Log.i("imageScanner", "Start");
        BarcodeScannerOptions options = new BarcodeScannerOptions.Builder().setBarcodeFormats(Barcode.FORMAT_QR_CODE).build();
        BarcodeScanner scanner = BarcodeScanning.getClient(options);

        //This next command was copied with no changes
        Task<List<Barcode>> result = scanner.process(image)
                .addOnSuccessListener(new OnSuccessListener<List<Barcode>>() {
                    @Override
                    public void onSuccess(List<Barcode> barcodes) {
                        // Task completed successfully
                        // [START_EXCLUDE]
                        // [START get_barcodes]
                        Log.i("imageScanneer", "on success");
                        for (Barcode barcode: barcodes) {
                            Rect bounds = barcode.getBoundingBox();
                            Point[] corners = barcode.getCornerPoints();

                            String rawValue = barcode.getRawValue();

                            int valueType = barcode.getValueType();
                            // See API reference for complete list of supported types
                            switch (valueType) {
                                case Barcode.TYPE_WIFI:
                                    String ssid = barcode.getWifi().getSsid();
                                    String password = barcode.getWifi().getPassword();
                                    int type = barcode.getWifi().getEncryptionType();
                                    break;
                                case Barcode.TYPE_URL:
                                    String title = barcode.getUrl().getTitle();
                                    String url = barcode.getUrl().getUrl();
                                    break;
                            }
                        }
                        // [END get_barcodes]
                        // [END_EXCLUDE]
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        // Task failed with an exception
                        // ...
                        Log.i("imageScanner", "on Failure");
                    }
                });

        while(!result.isComplete()){
            //Something to delay while the barcode processing completes
        }

        List<Barcode> scannedBarcodes = result.getResult();
        if(scannedBarcodes.size() > 0) {
            Barcode oneBarcode = scannedBarcodes.get(0);
            Log.i("barcode", oneBarcode.getRawValue());
            return oneBarcode.getRawValue();
        }
        else {
            Log.i("barcode", "empty");
            MakeSampleStorageItem sampleStorageItem = new MakeSampleStorageItem();
            StorageItem tempItem = sampleStorageItem.create();
            String jsomData = tempItem.makeString();
            return jsomData;
        }
    }
}

